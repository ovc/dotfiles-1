# Utility shell functions.
# vi: ft=sh

# Source file if it exists.
sourceifexists() {
	[ -f "$1" ] && [ -r "$1" ] && . "$1"
}
export sourceifexists >/dev/null

cdw() {
	local prog="$1"
	type "$prog" &>/dev/null
	if [ "$?" -ne 0 ]; then
		echo "\"${prog}\" not found in \$PATH." >&2
	else
		dir=$(dirname $(which "$prog"))
		echo "$dir"
		cd "$dir"
	fi
}
export cdw >/dev/null
[ -n "$completion_func" ] && $completion_func -cf cdw

# Time conversions.
epoch2iso8601() {
    local epoch="$1"
    date -d @$epoch +%Y-%m-%dT%H:%M:%S%z
}
export epoch2iso8601 >/dev/null

iso86012epoch() {
    local iso="$1"
    date -d "$iso" +%s
}
export iso86012epoch >/dev/null

# Shell detect functions {
	export SHELL_PLATFORM='unknown'
	ostype() { echo $OSTYPE | tr '[A-Z]' '[a-z]'; }
	case "$(ostype)" in
		*'linux'*	) SHELL_PLATFORM='linux'	;;
		*'darwin'*	) SHELL_PLATFORM='macos'		;;
		*'bsd'*		) SHELL_PLATFORM='bsd'		;;
	esac

	shell_is_linux() { [ "$SHELL_PLATFORM" = 'linux' ]; }
	shell_is_macos()   { [ "$SHELL_PLATFORM" = 'macos' ]; }
	shell_is_bsd()   { [ "$SHELL_PLATFORM" = 'bsd' ] || [ "$SHELL_PLATFORM" = 'macos' ]; }
# }

# Git overlay which adds a command to cd to git root.
git() {
	local gitbin=/usr/bin/git
	if [ "$1"  = root ]; then
		local root="$($gitbin rev-parse --show-cdup)"
		[ -n "$root" ] && cd "$root"
	else
		$gitbin $*
	fi
}

# Wrapper around the classic 'vi with ack' with search highlighting.
# Usage example: viack -i "search_term
# Last argument is the search string. Preceding arguments are for ack.
viack() {
	local search
	# Get the last argument. Source: http://stackoverflow.com/questions/1853946/getting-the-last-argument-passed-to-a-shell-script
	for search; do true; done
	vim -p $(ack -l $@) +/$search
}

# Wrapper around the classic 'vi with grep'.
vigrep() {
	local search
	for search; do true; done
	vim -p $(grep -Rl $@) +/$search
}


py_dev_log() {
	local message="$*"
	echo "ðŸ”¨ > $message..."
}

# Start development with virtualenv. Creates if does not exist yet.
# Assumes that PWD is in the project root dir.
py_dev() {
	proj=${PWD#$HOME/dev/}
	if ! lsvirtualenv | grep -q $proj;  then
		py_dev_log "Creating virtualenv $proj"
		mkvirtualenv $proj -p python3
	else
		py_dev_log "Switching to virtualenv $proj"
		workon $proj
	fi
}

# Set up python development environment. Assumes that PWD is in the project root dir.
py_fix_dev() {
	py_dev

	py_dev_log "Installing python requirements"
	[ -e requirements.txt ] && pip install -r requirements.txt
	[ -e requirements_testing.txt ] && pip install -r requirements_testing.txt

	# Generate tags for all modules found in the python library path and current directory.
	py_dev_log "Generating tags file"
	ctags -R -f ./tags $(python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") >/dev/null 2>&1

	py_dev_log "Generating cscope DB"
	find . -name '*.py' >cscope.files
	cscope -b -q

	# Rope-vim support.
	pip list &>/dev/null | grep -q ropevim
	if [ "$?" -ne 0 ]; then
		py_dev_log "Installing ropevim"
		pip install ropevim
	fi
	py_dev_log "Generating Rope import cache"
	vi -c RopeGenerateAutoimportCache -c q ropefiximport.py
}
