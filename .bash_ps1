# Set up the bash PS1 line.
# vi: ft=sh

# TODO use symbols for different VCS?
# git) printf '∓';;
# hg)  printf '☿';;
# svn) printf '⚡';;
# bzr) printf '⚘';;
# *) printf '∵';;

# Import colors.
. $HOME/bin/bash_colors.sh

# Reset default values.
PS1=''

# SSH.
PS1="${PS1}$([ -n "$SSH_CLIENT" ] && echo "${C_INVERSE}[SSH]${C_RESET} ")"

# Time.
PS1="${PS1}\A "

# Set CWD in tmux, if it's running, so that it later can be used in bindings.
#PS1=$PS1'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") $PWD)'
# Prompt command is issued before any other primary prompt commands.
PROMPT_COMMAND='$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD")'

#PS1='${debian_chroot:+($debian_chroot)}'

# Show user, host and CWD.
#PS1="${PS1}\u@\h:\w"
PS1="${PS1}\u@\h"

# Get a trimmed PWD.
pwd_trimmed() {
    # How many characters of the $PWD should be kept
    local pwdmaxlen=25
    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    local NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]; then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
    echo "$NEW_PWD"
}
PS1="${PS1}:\$(pwd_trimmed)"

# Get number of backround jobs.
nbr_bg_jobs() {
	njobs=`jobs | wc -l`
	if [ "$njobs" -gt 0 ]; then
		echo " (${njobs})"
	fi
}
PS1="${PS1}\$(nbr_bg_jobs)"

# Get git banch.
parse_git_branch() {
	#git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'

	type git >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	# Quit if this is not a Git repo.
	#branches=$(git branch --no-color 2>/dev/null)
	branch=$(git symbolic-ref HEAD 2>/dev/null)
	if [ "$?" -ne 0 ]; then
		return
	fi

	#branch=$(echo "$branch" | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	branch=${branch#refs/heads/}
	echo -n " [${branch}]"
	unset branch
}
PS1="${PS1}${C_FG_MAGENTA}\$(parse_git_branch)${C_RESET}"

# Get SVN branch.
parse_svn_branch() {
	if [ ! -d ".svn/" ]; then
		return
	fi

	type svn >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	local svn_root=$(svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p')
	local svn_url=$(svn info 2>/dev/null | sed -ne 's#^URL: ##p')

	# Show branch + URL.
	#echo $svn_url | sed -e 's#^'"${svn_root}"'##g' | awk '{print " [svn::"$1"]" }'

	# Show only branch.
	local branch=$(echo $svn_url | sed -e 's#^'"${svn_root}"'##g' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	echo -e " [${branch}]"
}
PS1="${PS1}${C_FG_YELLOW}\$(parse_svn_branch)${C_RESET}"

# Get mercurial branch.
parse_hg_branch() {
	type hg >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	summary=$(hg summary 2>/dev/null)
	if [ "$?" -ne 0 ]; then
		return
	fi

	local branch=$(echo "$summary" | grep 'branch:' | cut -d ' ' -f2)
	echo -e " [${branch}]"
}
PS1="${PS1}${C_FG_BLUE}\$(parse_hg_branch)${C_RESET}"

# End marker.
PS1="${PS1}> "

# Export to subshells.
export PS1
